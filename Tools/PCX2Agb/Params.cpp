#ifdef WIN32
#pragma warning (disable:4786) // truncated debug info names
#endif


#include "Params.h"

_GLOBALS globals;

void InitGlobals(void){
  globals.m_retValue=0;
  globals.m_showFileHeader=false;
  globals.m_tileXSize=8;
  globals.m_tileYSize=8;
  globals.m_colors16=true;
  globals.m_silet=false;
  globals.m_totalSilence=false;
  globals.m_generateDepend=false;
  globals.m_invertPalette=false;
  globals.m_constTiles=false;
  globals.m_writeTiles=true;
  globals.m_writePalette=true;
  globals.m_writeMap=true;
  globals.m_writeHeaderFile=true;
  globals.m_writeCFile=true;
  globals.m_writePCXFile=false;
  globals.m_insertZeroTile=false;
  globals.m_exportBinary=false;
  globals.m_exportBitmap=false;
  globals.m_optimizeTiles=false;
}

std::list<std::string> FormatParams(char *fileName){
  std::list<std::string> fileList;

  FILE *file=fopen(fileName,"rb");
  if(file==NULL){
    fprintf(stderr,"Couldn't open parameter file: %s\n",fileName);
    return fileList;
  }
  bool done=false;
  int argCounter=1;
  char *argList[100];

  std::string currString;

  while(done==false){
    char c;
    if(fread(&c,1,1,file)==0){
      done=true;
      if(currString.length()!=0){
        char *str=new char[currString.length()+1];
        strcpy(str,currString.c_str());
        argList[argCounter]=str;
        argCounter++;
        currString.erase();
      }
    }else{
      if((c!=' ')&&(c!=13)&&(c!=10)){
        currString+=c;
      }else{
        if(currString.length()!=0){
          char *str=new char[currString.length()+1];
          strcpy(str,currString.c_str());
          argList[argCounter]=str;
          argCounter++;
          currString.erase();
        }

      }
    }
  }
  
  fclose(file);

  fileList=HandleParams(argCounter,argList);
  unsigned short counter;
  for(counter=1;counter<argCounter;counter++){
    delete argList[counter];
  }
  
  return fileList;
}


void PrintHelp(void){
  if(!globals.m_totalSilence){
    printf("PCX2Agb by superike (dan@netbabyworld.com) 2001, 2002\n\n");

    printf("  Usage: PCX2Agb [switches] file1.pcx (file2.pcx...)\n\n");

    printf(" Switches                      Description\n\n");

    printf(" -sh        --ShowHeader       Prints an output of the PCX File header before\n");
    printf("                               parsing the file\n");
    printf(" -ip        --InvertPalette    Inverts the palette. Good for pcxs generated by\n");
    printf("                               Photoshop\n");
    printf(" -nh        --NoHeader         Writes no header file\n");
    printf(" -nc        --NoCFile          Exports no c file\n");
    printf(" -nm        --NoMap            Exports no map-data\n");
    printf(" -nt        --NoTiles          Exports no tile-data\n");
    printf(" -np        --NoPalette        Exports no palette-data\n");
    printf(" -it        --InsertTile       Inserts an empty tile in the tile list\n");
    printf(" -b         --Binary           Exports into binary files instead of c and\n");
    printf("                               header files.\n");
    printf(" -ot        --OptimizeTiles    Removes duplicate tiles\n");
    printf(" -eb        --ExportBitmap     Exports as a bitmap instead of tiles\n");
    printf(" -ei        --ExportImage      Exports a PCX-file of all the tiles\n");
    printf(" -m         --GenerateDepend   Prints expected dependencies to stdout.\n");
    printf(" -c256      --Colors256        Enables 256 color palette instead of 16\n");
    printf(" -ct        --ConstTiles       Makes tiles const (if no -b switch)\n");
    printf(" -s         --Silent           Makes the program silent allthogh errors are\n");
    printf("                               still displayed\n");
    printf(" -ts        --TotalSilence     No messages at all\n");
    printf(" -h         --Help             Displays this message and exits\n");
    printf(" -pf <file>                    Read parameters from a text file\n");
    printf("     --ParameterFile <file>\n\n");
  }
}

std::list<std::string> HandleParams(int argc,char *argv[]){

  int counter;
  std::list<std::string> fileList;

  if(argc<2){
    PrintHelp();
    return fileList;
  }
  
  //start at 1 because the first is the program cmdline
  for(counter=1;counter<argc;counter++){
    
    //Check if argv is a param or file
    if(argv[counter][0]=='-'){
      //param
      if((stricmp("-sh",argv[counter])==0)||
        (stricmp("--ShowHeader",argv[counter])==0)){
        globals.m_showFileHeader=true;
        continue;
      }
      
      if((stricmp("-s",argv[counter])==0)||
        (stricmp("--Silent",argv[counter])==0)){
          globals.m_silet=true;
        continue;
      }
      
      if((stricmp("-ts",argv[counter])==0)||
        (stricmp("--TotalSilence",argv[counter])==0)){
        globals.m_silet=true;
        globals.m_totalSilence=true;
        continue;
      }

      if(stricmp("-ty",argv[counter])==0){
        globals.m_tileYSize=atoi(argv[counter+1]);
        counter++;
        continue;
      }
      
      if((stricmp("-ip",argv[counter])==0)||
        (stricmp("--InvertPalette",argv[counter])==0)){
          globals.m_invertPalette=true;
        continue;
      }

      if((stricmp("-nh",argv[counter])==0)||
        (stricmp("--NoHeader",argv[counter])==0)){
        globals.m_writeHeaderFile=false;
        continue;
      }
      
      if((stricmp("-nc",argv[counter])==0)||
        (stricmp("--NoCFile",argv[counter])==0)){
        globals.m_writeCFile=false;
        continue;
      }
      
      if((stricmp("-ei",argv[counter])==0)||
        (stricmp("--ExportImage",argv[counter])==0)){
        globals.m_writePCXFile=true;
        continue;
      }
      
      if((stricmp("-nt",argv[counter])==0)||
        (stricmp("--NoTiles",argv[counter])==0)){
        globals.m_writeTiles=false;
        continue;
      }

      if((stricmp("-nm",argv[counter])==0)||
        (stricmp("--NoMap",argv[counter])==0)){
        globals.m_writeMap=false;
        continue;
      }
      
      if((stricmp("-np",argv[counter])==0)||
        (stricmp("--NoPalette",argv[counter])==0)){
        globals.m_writePalette=false;
        continue;
      }
      
      if((stricmp("-it",argv[counter])==0)||
        (stricmp("--InsertTile",argv[counter])==0)){
        globals.m_insertZeroTile=true;
        continue;
      }

      if((stricmp("-m",argv[counter])==0)||
        (stricmp("--GenerateDepend",argv[counter])==0)){
          globals.m_generateDepend=true;
        continue;
      }
      
      if((stricmp("-c256",argv[counter])==0)||
        (stricmp("--Colors256",argv[counter])==0)){
        globals.m_colors16=false;
        continue;
      }
      
      if((stricmp("-ct",argv[counter])==0)||
        (stricmp("--ConstTiles",argv[counter])==0)){
        globals.m_constTiles=true;
        continue;
      }
      
      if((stricmp("-h",argv[counter])==0)||
        (stricmp("--help",argv[counter])==0)){
        PrintHelp();
        fileList.clear();
        globals.m_retValue=0;
        break;
      }
      
      if((stricmp("-b",argv[counter])==0)||
        (stricmp("--Binary",argv[counter])==0)){
        globals.m_exportBinary=true;
        continue;
      }

      if((stricmp("-ot",argv[counter])==0)||
        (stricmp("--OptimizeTiles",argv[counter])==0)){
        globals.m_optimizeTiles=true;
        continue;
      }
      
      if((stricmp("-eb",argv[counter])==0)||
        (stricmp("--ExportBitmap",argv[counter])==0)){
        globals.m_exportBitmap=true;
        continue;
      }

      if((stricmp("-pf",argv[counter])==0)||
        (stricmp("--ParmeterFile",argv[counter])==0)){
      
        std::list<std::string> tmpList;
        tmpList=FormatParams(argv[counter+1]);
        std::list<std::string>::iterator i;
        
        for(i=tmpList.begin();i!=tmpList.end();i++){
          fileList.push_back((*i));
        }
        counter++;
        continue;
      }
      
      //file
      fileList.push_back(argv[counter]);
      
    }else{
      //file
      fileList.push_back(argv[counter]);
    }
  }

  return fileList;
}


